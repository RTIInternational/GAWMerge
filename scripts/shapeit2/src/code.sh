#!/bin/bash
# shapeit2 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_prefix: '$input_prefix'"
	echo "Value of output_prefix: '$output_prefix'"
    echo "Value of input_map: '$input_map'"
    echo "Value of thread: '$thread'"
    echo "Value of effective_size: '$effective_size'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "${input_prefix}.bed" -o input_bed
	dx download "${input_prefix}.bim" -o input_bim
	dx download "${input_prefix}.fam" -o input_fam

    dx download "$input_map" -o input_map

    # Fill in your application code here.
    shapeit \
      --input-bed input_bed input_bim input_fam \
      --input-map input_map \
      --output-max $output_prefix \
      --states 500 \
      --burn 10 \
      --prune 10 \
      --main 50 \
      --thread $thread \
      --effective-size $effective_size
	  
	# convert output hap to vcf
	shapeit \
		-convert \
		--input-haps $output_prefix \
		--output-vcf ${output_prefix}.vcf
	
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
	
	mkdir -p out/phased
	
	mv ${output_prefix}.* out/phased/
	mv *.log out/phased/
	dx-upload-all-outputs

#    output_vcf=$(dx upload output_vcf --brief)
#    output_log=$(dx upload output_log --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#    dx-jobutil-add-output output_vcf "$output_vcf" --class=file
#    dx-jobutil-add-output output_log "$output_log" --class=file
}
