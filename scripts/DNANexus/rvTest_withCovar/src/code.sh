#!/bin/bash
# rvTest_withCovar 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_dose_vcf: '$input_dose_vcf'"
    echo "Value of input_pheno_ped: '$input_pheno_ped'"
	echo "Value of input_covar_ped: '$input_covar_ped'"
    echo "Value of pheno_name: '$pheno_name'"
	echo "Value of covar_name: '$covar_name'"
    echo "Value of meta: '$meta'"
    echo "Value of output_prefix: '$output_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	mkdir -p /data/
	
    dx download "$input_dose_vcf" -o /data/input_dose_vcf

    dx download "$input_pheno_ped" -o /data/input_pheno_ped
	dx download "$input_covar_ped" -o /data/input_covar_ped

    # Fill in your application code here.
    dx-docker run -v /data:/data rticode/rvtests:2.1.0 rvtest \
        --inVcf /data/input_dose_vcf \
        --pheno /data/input_pheno_ped \
        --pheno-name $pheno_name \
		--covar /data/input_covar_ped \
		--covar-name $covar_name  \
        --meta $meta \
        --out /data/${output_prefix} 

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    mkdir -p out/results
	mv /data/${output_prefix}.* out/results
	dx-upload-all-outputs
}
