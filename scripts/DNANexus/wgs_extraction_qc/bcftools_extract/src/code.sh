#!/bin/bash
# bcftools_extract 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_bcf_file: '$input_bcf_file'"
    echo "Value of sample_file: '$sample_file'"
    echo "Value of snp_file: '$snp_file'"
	echo "Value of output_format: '$output_format'"
	echo "Value of output_prefix: '$output_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	mkdir -p /data/

    dx download "$input_bcf_file" -o /data/input_bcf_file
	
	dx download "$input_csi_file" -o /data/input_bcf_file.csi

    dx download "$sample_file" -o /data/sample_file

    dx download "$snp_file" -o /data/snp_file

    # Fill in your application code here.
	if [ $output_format == "z" ];then output_suffix="vcf.gz"; fi
	if [ $output_format == "b" ];then output_suffix="bcf"; fi
	dx-docker run -v /data/:/data rtibiocloud/bcftools:v1.9-8875c1e bcftools view -S /data/sample_file --force-samples -O ${output_format} -o /data/${output_prefix}.${output_suffix} -R /data/snp_file /data/input_bcf_file

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    mkdir -p out/results
	mv /data/${output_prefix}.* out/results/
	dx-upload-all-outputs
}
