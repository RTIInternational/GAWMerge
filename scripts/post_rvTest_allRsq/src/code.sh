#!/bin/bash
# post_rvTest_allRsq 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of prefix_info_rsq: '$prefix_info_rsq'"
    echo "Value of prefix_rvtest_assoc: '$prefix_rvtest_assoc'"
	echo "Value of array_chr: '${array_chr[*]}'"
    echo "Value of maf_cut: '$maf_cut'"
    echo "Value of rsq_cut: '$rsq_cut'"
    echo "Value of rsq_diff_cut: '$rsq_diff_cut'"
	echo "Value of output_prefix: '$output_prefix'"
	
	# Fill in your application code here.
	# filter results
	for chr in ${array_chr[*]};do
		dx download "${prefix_info_rsq}.chr${chr}.info.rsq" -o input_info_rsq
		dx download "${prefix_rvtest_assoc}.chr${chr}.rvTest.MetaScore.assoc.gz" -o input_rvTest_assoc.gz
		tail -n +2 input_info_rsq | \
        awk -v maf_cut=$maf_cut -v rsq_cut=$rsq_cut -v rsq_diff_cut=$rsq_diff_cut '{diff=sqrt(($5-$6)^2); 
                                                                                    if($3 > maf_cut && $4 > rsq_cut && $5 > rsq_cut && $6 > rsq_cut && diff<rsq_diff_cut){ print $1 } }' \
        > SNPs.keep
		
		zcat input_rvTest_assoc.gz | \
			awk '/^#/ {next} {print $0}' | head -n 1 \
			> ${output_prefix}.chr${chr}.rvTest.maf_gt_${maf_cut}_rsq_gt_${rsq_cut}_rsq_diff_lt_${rsq_diff_cut}

		awk 'NR==FNR{map[$1]=1; next} { if(map[$1":"$2":"$3":"$4]==1) print $0;}' \
			SNPs.keep \
			<(zgrep -P "^${chr}\s" input_rvTest_assoc.gz) \
			>> ${output_prefix}.chr${chr}.rvTest.maf_gt_${maf_cut}_rsq_gt_${rsq_cut}_rsq_diff_lt_${rsq_diff_cut}
		rm input_info_rsq
		rm input_rvTest_assoc.gz
		rm SNPs.keep
	done
	
	# make association table
	tableFile=${output_prefix}.table
	echo -e "VARIANT_id\tCHR\tPOSITION\tP\tTYPE" > $tableFile

	for chr in ${array_chr[*]};do
		tail -n+2 ${output_prefix}.chr${chr}.rvTest.maf_gt_${maf_cut}_rsq_gt_${rsq_cut}_rsq_diff_lt_${rsq_diff_cut} | \
        perl -lane 'if (($F[2] eq "A" || $F[2] eq "C" || $F[2] eq "G" || $F[2] eq "T") && (($F[3] eq "A" || $F[3] eq "C" || $F[3] eq "G" || $F[3] eq "T"))) {
            print join("\t",$F[0].":".$F[1],$F[0],$F[1],$F[15],"snp");
            } else {
                print join("\t",$F[0].":".$F[1],$F[0],$F[1],$F[15],"indel");
            }'  >> $tableFile
	done


    
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    mkdir -p out/results
	mv ${output_prefix}.table out/results/

    dx-upload-all-outputs
}
